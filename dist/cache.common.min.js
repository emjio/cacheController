/*!
 * cachecontroller v1.1.0
 * (c) 2020-2021 emjio
 * Released under the MIT License.
 */
"use strict";module.exports=class{#e=0;#s=new Map;#t={};#i=10;#h=3;constructor(e){const{maxSize:s,maxUseTime:t}={...e};if(s<=0||isNaN(s))throw new Error("maxSize should be a number");if(t<=0||isNaN(t))throw new Error("maxSize should be a number");this.#i=s,this.#h=t,this.axiosInstance=e.axios}setCache(e,s){for(;this.#e+s.size>this.#i&&0!==this.#e;)this.removeEarliestCache();this.#s.set(e,s),this.#t[e]=0,this.#e+=s.size}haveCache(e){return this.#s.has(e)}getCache(e){let s=null;return e in this.#t&&(s=this.#s.get(e).data,this.#t[e]+=1,this.#t[e]>=this.#h&&this.deleteCache(e)),s}generateRequest(e,s){return async t=>{const i=`${e}-${JSON.stringify(t)}`;if(this.haveCache(i))return this.getCache(i);try{const e=await s(t);return this.setCache(i,{data:e,size:1}),e}catch(e){throw new Error(e)}}}removeEarliestCache(){const e=Object.keys(this.#t).sort(((e,s)=>this.#t[e]-this.#t[s]))[0];delete this.#t[e],this.#e-=this.#s.get(e).size,this.#s.delete(e)}deleteCache(e){this.#s.has(e)&&(delete this.#t[e],this.#e-=this.#s.get(e).size,this.#s.delete(e))}};
